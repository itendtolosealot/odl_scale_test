#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class EVENT:
  CREATE = 1
  UPDATE = 2
  DELETE = 3
  ATTACH = 4
  DETACH = 5

  _VALUES_TO_NAMES = {
    1: "CREATE",
    2: "UPDATE",
    3: "DELETE",
    4: "ATTACH",
    5: "DETACH",
  }

  _NAMES_TO_VALUES = {
    "CREATE": 1,
    "UPDATE": 2,
    "DELETE": 3,
    "ATTACH": 4,
    "DETACH": 5,
  }

class RESYNC_STATUS:
  IDLE = 0
  ONGOING = 1
  COMPLETED = 2
  FAILED = 3

  _VALUES_TO_NAMES = {
    0: "IDLE",
    1: "ONGOING",
    2: "COMPLETED",
    3: "FAILED",
  }

  _NAMES_TO_VALUES = {
    "IDLE": 0,
    "ONGOING": 1,
    "COMPLETED": 2,
    "FAILED": 3,
  }

class RESOURCE:
  NETWORK = 1
  SUBNET = 2
  PORT = 3
  ROUTER = 4

  _VALUES_TO_NAMES = {
    1: "NETWORK",
    2: "SUBNET",
    3: "PORT",
    4: "ROUTER",
  }

  _NAMES_TO_VALUES = {
    "NETWORK": 1,
    "SUBNET": 2,
    "PORT": 3,
    "ROUTER": 4,
  }


class resource:
  """
  Attributes:
   - type
   - event
   - data
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I32, 'event', None, None, ), # 2
    (3, TType.STRING, 'data', None, None, ), # 3
  )

  def __init__(self, type=None, event=None, data=None,):
    self.type = type
    self.event = event
    self.data = data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.event = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.data = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('resource')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.event is not None:
      oprot.writeFieldBegin('event', TType.I32, 2)
      oprot.writeI32(self.event)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRING, 3)
      oprot.writeString(self.data)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.event is None:
      raise TProtocol.TProtocolException(message='Required field event is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
