#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class EVENT:
  CREATE = 1
  UPDATE = 2
  DELETE = 3
  ATTACH = 4
  DETACH = 5

  _VALUES_TO_NAMES = {
    1: "CREATE",
    2: "UPDATE",
    3: "DELETE",
    4: "ATTACH",
    5: "DETACH",
  }

  _NAMES_TO_VALUES = {
    "CREATE": 1,
    "UPDATE": 2,
    "DELETE": 3,
    "ATTACH": 4,
    "DETACH": 5,
  }

class RESOURCE:
  NETWORK = 1
  SUBNET = 2
  PORT = 3
  ROUTER = 4

  _VALUES_TO_NAMES = {
    1: "NETWORK",
    2: "SUBNET",
    3: "PORT",
    4: "ROUTER",
  }

  _NAMES_TO_VALUES = {
    "NETWORK": 1,
    "SUBNET": 2,
    "PORT": 3,
    "ROUTER": 4,
  }


class fixed_ip:
  """
  Attributes:
   - ip_address
   - subnet_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ip_address', None, None, ), # 1
    (2, TType.STRING, 'subnet_id', None, None, ), # 2
  )

  def __init__(self, ip_address=None, subnet_id=None,):
    self.ip_address = ip_address
    self.subnet_id = subnet_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ip_address = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.subnet_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('fixed_ip')
    if self.ip_address is not None:
      oprot.writeFieldBegin('ip_address', TType.STRING, 1)
      oprot.writeString(self.ip_address)
      oprot.writeFieldEnd()
    if self.subnet_id is not None:
      oprot.writeFieldBegin('subnet_id', TType.STRING, 2)
      oprot.writeString(self.subnet_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class allowed_address_pair:
  """
  Attributes:
   - ip_address
   - mac_address
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ip_address', None, None, ), # 1
    (2, TType.STRING, 'mac_address', None, None, ), # 2
  )

  def __init__(self, ip_address=None, mac_address=None,):
    self.ip_address = ip_address
    self.mac_address = mac_address

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ip_address = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mac_address = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('allowed_address_pair')
    if self.ip_address is not None:
      oprot.writeFieldBegin('ip_address', TType.STRING, 1)
      oprot.writeString(self.ip_address)
      oprot.writeFieldEnd()
    if self.mac_address is not None:
      oprot.writeFieldBegin('mac_address', TType.STRING, 2)
      oprot.writeString(self.mac_address)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class external_fixed_ip:
  """
  Attributes:
   - ip_address
   - subnet_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ip_address', None, None, ), # 1
    (2, TType.STRING, 'subnet_id', None, None, ), # 2
  )

  def __init__(self, ip_address=None, subnet_id=None,):
    self.ip_address = ip_address
    self.subnet_id = subnet_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ip_address = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.subnet_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('external_fixed_ip')
    if self.ip_address is not None:
      oprot.writeFieldBegin('ip_address', TType.STRING, 1)
      oprot.writeString(self.ip_address)
      oprot.writeFieldEnd()
    if self.subnet_id is not None:
      oprot.writeFieldBegin('subnet_id', TType.STRING, 2)
      oprot.writeString(self.subnet_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.ip_address is None:
      raise TProtocol.TProtocolException(message='Required field ip_address is unset!')
    if self.subnet_id is None:
      raise TProtocol.TProtocolException(message='Required field subnet_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class extra_route:
  """
  Attributes:
   - router_id
   - destination
   - nexthop
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'router_id', None, None, ), # 1
    (2, TType.STRING, 'destination', None, None, ), # 2
    (3, TType.STRING, 'nexthop', None, None, ), # 3
  )

  def __init__(self, router_id=None, destination=None, nexthop=None,):
    self.router_id = router_id
    self.destination = destination
    self.nexthop = nexthop

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.router_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.destination = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.nexthop = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('extra_route')
    if self.router_id is not None:
      oprot.writeFieldBegin('router_id', TType.STRING, 1)
      oprot.writeString(self.router_id)
      oprot.writeFieldEnd()
    if self.destination is not None:
      oprot.writeFieldBegin('destination', TType.STRING, 2)
      oprot.writeString(self.destination)
      oprot.writeFieldEnd()
    if self.nexthop is not None:
      oprot.writeFieldBegin('nexthop', TType.STRING, 3)
      oprot.writeString(self.nexthop)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.router_id is None:
      raise TProtocol.TProtocolException(message='Required field router_id is unset!')
    if self.destination is None:
      raise TProtocol.TProtocolException(message='Required field destination is unset!')
    if self.nexthop is None:
      raise TProtocol.TProtocolException(message='Required field nexthop is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class network:
  """
  Attributes:
   - network_uuid
   - mtu
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'network_uuid', None, None, ), # 1
    (2, TType.I16, 'mtu', None, None, ), # 2
  )

  def __init__(self, network_uuid=None, mtu=None,):
    self.network_uuid = network_uuid
    self.mtu = mtu

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.network_uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.mtu = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('network')
    if self.network_uuid is not None:
      oprot.writeFieldBegin('network_uuid', TType.STRING, 1)
      oprot.writeString(self.network_uuid)
      oprot.writeFieldEnd()
    if self.mtu is not None:
      oprot.writeFieldBegin('mtu', TType.I16, 2)
      oprot.writeI16(self.mtu)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.network_uuid is None:
      raise TProtocol.TProtocolException(message='Required field network_uuid is unset!')
    if self.mtu is None:
      raise TProtocol.TProtocolException(message='Required field mtu is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class subnet:
  """
  Attributes:
   - subnet_uuid
   - network_uuid
   - cidr
   - ip_version
   - host_routes
   - gateway
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'subnet_uuid', None, None, ), # 1
    (2, TType.STRING, 'network_uuid', None, None, ), # 2
    (3, TType.STRING, 'cidr', None, None, ), # 3
    (4, TType.BYTE, 'ip_version', None, None, ), # 4
    (5, TType.MAP, 'host_routes', (TType.STRING,None,TType.STRING,None), None, ), # 5
    (6, TType.STRING, 'gateway', None, None, ), # 6
  )

  def __init__(self, subnet_uuid=None, network_uuid=None, cidr=None, ip_version=None, host_routes=None, gateway=None,):
    self.subnet_uuid = subnet_uuid
    self.network_uuid = network_uuid
    self.cidr = cidr
    self.ip_version = ip_version
    self.host_routes = host_routes
    self.gateway = gateway

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.subnet_uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.network_uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.cidr = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.ip_version = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.host_routes = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.host_routes[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.gateway = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('subnet')
    if self.subnet_uuid is not None:
      oprot.writeFieldBegin('subnet_uuid', TType.STRING, 1)
      oprot.writeString(self.subnet_uuid)
      oprot.writeFieldEnd()
    if self.network_uuid is not None:
      oprot.writeFieldBegin('network_uuid', TType.STRING, 2)
      oprot.writeString(self.network_uuid)
      oprot.writeFieldEnd()
    if self.cidr is not None:
      oprot.writeFieldBegin('cidr', TType.STRING, 3)
      oprot.writeString(self.cidr)
      oprot.writeFieldEnd()
    if self.ip_version is not None:
      oprot.writeFieldBegin('ip_version', TType.BYTE, 4)
      oprot.writeByte(self.ip_version)
      oprot.writeFieldEnd()
    if self.host_routes is not None:
      oprot.writeFieldBegin('host_routes', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.host_routes))
      for kiter7,viter8 in self.host_routes.items():
        oprot.writeString(kiter7)
        oprot.writeString(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.gateway is not None:
      oprot.writeFieldBegin('gateway', TType.STRING, 6)
      oprot.writeString(self.gateway)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.subnet_uuid is None:
      raise TProtocol.TProtocolException(message='Required field subnet_uuid is unset!')
    if self.network_uuid is None:
      raise TProtocol.TProtocolException(message='Required field network_uuid is unset!')
    if self.cidr is None:
      raise TProtocol.TProtocolException(message='Required field cidr is unset!')
    if self.ip_version is None:
      raise TProtocol.TProtocolException(message='Required field ip_version is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class port:
  """
  Attributes:
   - port_uuid
   - network_uuid
   - fixed_ips
   - mac_address
   - aaps
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'port_uuid', None, None, ), # 1
    (2, TType.STRING, 'network_uuid', None, None, ), # 2
    (3, TType.LIST, 'fixed_ips', (TType.STRUCT,(fixed_ip, fixed_ip.thrift_spec)), None, ), # 3
    (4, TType.STRING, 'mac_address', None, None, ), # 4
    (5, TType.LIST, 'aaps', (TType.STRUCT,(allowed_address_pair, allowed_address_pair.thrift_spec)), None, ), # 5
  )

  def __init__(self, port_uuid=None, network_uuid=None, fixed_ips=None, mac_address=None, aaps=None,):
    self.port_uuid = port_uuid
    self.network_uuid = network_uuid
    self.fixed_ips = fixed_ips
    self.mac_address = mac_address
    self.aaps = aaps

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.port_uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.network_uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.fixed_ips = []
          (_etype12, _size9) = iprot.readListBegin()
          for _i13 in xrange(_size9):
            _elem14 = fixed_ip()
            _elem14.read(iprot)
            self.fixed_ips.append(_elem14)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.mac_address = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.aaps = []
          (_etype18, _size15) = iprot.readListBegin()
          for _i19 in xrange(_size15):
            _elem20 = allowed_address_pair()
            _elem20.read(iprot)
            self.aaps.append(_elem20)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('port')
    if self.port_uuid is not None:
      oprot.writeFieldBegin('port_uuid', TType.STRING, 1)
      oprot.writeString(self.port_uuid)
      oprot.writeFieldEnd()
    if self.network_uuid is not None:
      oprot.writeFieldBegin('network_uuid', TType.STRING, 2)
      oprot.writeString(self.network_uuid)
      oprot.writeFieldEnd()
    if self.fixed_ips is not None:
      oprot.writeFieldBegin('fixed_ips', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.fixed_ips))
      for iter21 in self.fixed_ips:
        iter21.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mac_address is not None:
      oprot.writeFieldBegin('mac_address', TType.STRING, 4)
      oprot.writeString(self.mac_address)
      oprot.writeFieldEnd()
    if self.aaps is not None:
      oprot.writeFieldBegin('aaps', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.aaps))
      for iter22 in self.aaps:
        iter22.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.port_uuid is None:
      raise TProtocol.TProtocolException(message='Required field port_uuid is unset!')
    if self.network_uuid is None:
      raise TProtocol.TProtocolException(message='Required field network_uuid is unset!')
    if self.fixed_ips is None:
      raise TProtocol.TProtocolException(message='Required field fixed_ips is unset!')
    if self.mac_address is None:
      raise TProtocol.TProtocolException(message='Required field mac_address is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class router:
  """
  Attributes:
   - router_uuid
   - subnets
   - routes
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'router_uuid', None, None, ), # 1
    (2, TType.LIST, 'subnets', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'routes', (TType.STRUCT,(extra_route, extra_route.thrift_spec)), None, ), # 3
  )

  def __init__(self, router_uuid=None, subnets=None, routes=None,):
    self.router_uuid = router_uuid
    self.subnets = subnets
    self.routes = routes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.router_uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.subnets = []
          (_etype26, _size23) = iprot.readListBegin()
          for _i27 in xrange(_size23):
            _elem28 = iprot.readString();
            self.subnets.append(_elem28)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.routes = []
          (_etype32, _size29) = iprot.readListBegin()
          for _i33 in xrange(_size29):
            _elem34 = extra_route()
            _elem34.read(iprot)
            self.routes.append(_elem34)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('router')
    if self.router_uuid is not None:
      oprot.writeFieldBegin('router_uuid', TType.STRING, 1)
      oprot.writeString(self.router_uuid)
      oprot.writeFieldEnd()
    if self.subnets is not None:
      oprot.writeFieldBegin('subnets', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.subnets))
      for iter35 in self.subnets:
        oprot.writeString(iter35)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.routes is not None:
      oprot.writeFieldBegin('routes', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.routes))
      for iter36 in self.routes:
        iter36.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.router_uuid is None:
      raise TProtocol.TProtocolException(message='Required field router_uuid is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class resource:
  """
  Attributes:
   - type
   - event
   - net
   - sub
   - pt
   - rtr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I32, 'event', None, None, ), # 2
    (3, TType.STRUCT, 'net', (network, network.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'sub', (subnet, subnet.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'pt', (port, port.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'rtr', (router, router.thrift_spec), None, ), # 6
  )

  def __init__(self, type=None, event=None, net=None, sub=None, pt=None, rtr=None,):
    self.type = type
    self.event = event
    self.net = net
    self.sub = sub
    self.pt = pt
    self.rtr = rtr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.event = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.net = network()
          self.net.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.sub = subnet()
          self.sub.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.pt = port()
          self.pt.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.rtr = router()
          self.rtr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('resource')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.event is not None:
      oprot.writeFieldBegin('event', TType.I32, 2)
      oprot.writeI32(self.event)
      oprot.writeFieldEnd()
    if self.net is not None:
      oprot.writeFieldBegin('net', TType.STRUCT, 3)
      self.net.write(oprot)
      oprot.writeFieldEnd()
    if self.sub is not None:
      oprot.writeFieldBegin('sub', TType.STRUCT, 4)
      self.sub.write(oprot)
      oprot.writeFieldEnd()
    if self.pt is not None:
      oprot.writeFieldBegin('pt', TType.STRUCT, 5)
      self.pt.write(oprot)
      oprot.writeFieldEnd()
    if self.rtr is not None:
      oprot.writeFieldBegin('rtr', TType.STRUCT, 6)
      self.rtr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.event is None:
      raise TProtocol.TProtocolException(message='Required field event is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
